/*
 * Created by kevo on 5/11/2016.
 */

                                ~~~~~~~~~~~~~~~
                                     NOTEz
                                ~~~~~~~~~~~~~~~

5/13
----
* Noticed I had complete admin control on mySQL workbench. very cool.

5/16
----
* 404 catching middleware is currently commented out at the bottom of html-routes.js
* Server setup
* Sequelize models and seeds created. All models separated with the seed at the bottom. Table creation currently happens at
  the bottom of user-model.js
* Angular module/controller setup for index.html sign up modal
* GET/POST for user creation complete. angular successfully grabs the form info and send it the DB

                                ~~~~~~~~~~~~~~~
                                    API DOCS
                                ~~~~~~~~~~~~~~~

* JSDOCS for creation
* People could use our API to display threads on their site or to show whether users are online or not

                                ~~~~~~~~~~~~~~~
                                      SEO
                                ~~~~~~~~~~~~~~~

* Domain is registered to my google developer console and taking advantage of google analytics
* <meta> tags with keywords and keyword rich description
* robots.txt to allow crawling
* Generate a Sitemap

                                ~~~~~~~~~~~~~~~
                                  ROUTING/HTTP
                                ~~~~~~~~~~~~~~~

ROUTING
-------
Users
Categories
Threads
Posts

* Each have their own model, route file and controller

HTTP SETUP FOR FORUM
--------------------
* Come up with IDs for all of the DB fields and documents this, will later be used and expanded upon for API JSDOCS
* Modal buttons for new thread? reply? or will that get annoying if it disappears on a misclick?
* Users don't need a DELETE method
* Only admins can create categories

----------------------------------------------------------------------------------------------------
* User table routing - GET(list all users and info)
                       POST(new user registration)
                       PUT(update by id, profile details etc)
                       DELETE(by id, admin only)

* Category table routing - GET(list categories on main forum page)
                         POST(will rarely be used)
                         PUT(used to update last post details)
                         DELETE(rarely used)

* Thread table routing - GET(list threads in a category)
                       POST(used often, will create new threads)
                       PUT(sometimes people want to edit thread titles usually admins only though)
                       DELETE(admin only)

* Post table routing - GET(display all posts in a thread[big hit on the DB])
                     POST(create new post, used VERY often)
                     PUT(users may edit their posts as well as admins)
                     DELETE(admins may delete posts)
-----------------------------------------------------------------------------------------------------

                                ~~~~~~~~~~~~~~~
                                    ANGULAR
                                ~~~~~~~~~~~~~~~

* Is it doing a double get because of the need for the redirect in both the angular controller and the route?

                                ~~~~~~~~~~~~~~~
                                  REGISTRATION
                                ~~~~~~~~~~~~~~~

* USERNAME (REGEX to only allow letters, numbers and underscores)
  PASSWORD (REGEX to only allow ??)
  CONFIRM PASSWORD
  EMAIL (REGEX to verify it's an actual email, or use a service for this)

*  1. Validate the user data
   2. IF not valid, display error message and indicate error fields
   3, IF userName is already taken, state that and tell the user to try again
   4. If no errors and the data is valid, then save the user info into the user table

* sha1 password hashing in suquelize after validation and pre input into user table

                                ~~~~~~~~~~~~~~~
                                  USER LANDING
                                ~~~~~~~~~~~~~~~

* Identify users in routing by userName?
* Users will hit a landing page after login. it's similar to the main page, but displays a welcome $USERNAME, the current date and time
  and number of current logged in users

                                ~~~~~~~~~~~~~~~
                                  HELP SURVEY
                                ~~~~~~~~~~~~~~~

* mySQL doesn't support arrays. will make another table for answers and make it a foreign key of user_id

                                ~~~~~~~~~~~~~~~
                                  mySQL SCHEMA
                                ~~~~~~~~~~~~~~~

mySQL SCHEMA FOR USER ACCOUNTS
------------------------------
* Have the mySQL query monitor on my server showing the query log live to the class in a snap window
* USER LEVELS ~ 0 - user //// 1 - admin

* The column in the referencing table the foreign key refers to must be a primary key
* The values that are referred to must exist in the referenced table


FIELDS
-------

USER TABLE
----------
USER TABLE ON CREATION
----------------------
* userId - (PRIMARY KEY)
* userName - (UNIQUE)
* emailAddr (UNIQUE, PRIMARY, AUTO INC)
* password - hashed * salted (mmmm)

PROFILE FOR POST CREATION
-------------------------
* Registration Date
* postCount - this is incremented in the logic controller when someone POSTS a... new post or thread
* avatar
* session - the RCB session you are in
* realName
* location
* favLang

FORUM TABLES
------------
THREAD TABLE
------------

POST TABLE
----------

HELP ROOM TABLES
----------------
GIVE HELP
---------

GET HELP
--------

PROJECT TABLE
-------------

                                ~~~~~~~~~~~~~~~
                                   SEQUELIZE

                                ~~~~~~~~~~~~~~~

* Added seeds for all the tables for easier testing after dropping a table
* Setup foreign keys after site is setup
* Try to make one single sync file, it isn't seeing the connection though
* See which date works better. the Sequelize.DATE or the one it creates default
* Sequelize.TEXT ~ this allows large amounts of text in a column. might be great for posts?
* Can add validation logic functions in the validation field of a model
* findOrCreate() ~ create only if doesn't exist, similar to a unique key
* Can add regex and other things as sequelize model params after everything is working
* Singular names for sequelize models and define a plural name for the db?

// Create the tables:
Project.sync()
Task.sync()

// Force the creation!
Project.sync({force: true}) // this will drop the table first and re-create it afterwards

// drop the tables:
Project.drop()
Task.drop()

// event handling:
Project.[sync|drop]().then(function() {
  // ok ... everything is nice!
}).catch(function(error) {
  // oooh, did you enter wrong database credentials?
})

// Sync all models that aren't already in the database
sequelize.sync()

// Force sync all models
sequelize.sync({force: true})

// Drop all tables
sequelize.drop()

// emit handling:
sequelize.[sync|drop]().then(function() {
  // woot woot
}).catch(function(error) {
  // whooops
})

                                ~~~~~~~~~~~~~~~
                                  PASS HASHING
                                ~~~~~~~~~~~~~~~

npm install passport
npm install bcrypt ~ IF YOU HAVE PROBLEMS INSTALL MS VISUAL STUDIO COMMUNITY 2015 with all the language packs

http://www.techonthenet.com/mysql/functions/password.php ~ mySQL password syntax

"They are different things bcrypt work factor prevents brute forcing the passwords stored on the server.
When someone breaks into your system they will not be able to run a brute force and crack all the passwords of your users, since people tend
to use same passwords all over the place this is very useful. Passwords are also salted. First link explains it better then I can"

"I would recommend using the default 10 rounds when "salting", bcrypt.hash('password', 10, func .."

SET @salt := CONV(FLOOR(RAND() * 0x100000000), 10, 16)


MYSQL SALTING
-------------
UPDATE  passwords
SET     password = CONCAT(@salt, SHA(CONCAT(@salt, @typed_password)))

SELECT  1
FROM    passwords
WHERE   SHA(CONCAT(SUBSTRING(password, 1, 8), @typed_password)) = SUBSTRING(password, 9, 40)

                                ~~~~~~~~~~~~~~~
                                  UNIT TESTING
                                ~~~~~~~~~~~~~~~

* Use Mocha or Chai?
* Do it on post creation