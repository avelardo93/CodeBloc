/*
 * Created by kevo on 5/11/2016.
 */

                                ~~~~~~~~~~~~~~~
                                     NOTEz
                                ~~~~~~~~~~~~~~~

5/13
----
* Noticed I had complete admin control on mySQL workbench. very cool.

                                ~~~~~~~~~~~~~~~
                                    API DOCS
                                ~~~~~~~~~~~~~~~

HTTP SETUP FOR FORUM
--------------------
* Come up with IDs for all of the DB fields and documents this, will later be used and expanded upon for API JSDOCS
* Modal buttons for new thread? reply? or will that get annoying if it disappears on a misclick?
* Users don't need a DELETE method
* Only admins can create categories

                                ~~~~~~~~~~~~~~~
                                  REGISTRATION
                                ~~~~~~~~~~~~~~~

* USERNAME (REGEX to only allow letters, numbers and underscores)
  PASSWORD (REGEX to only allow ??)
  CONFIRM PASSWORD
  EMAIL (REGEX to verify it's an actual email, or use a service for this)

*  1. Validate the user data
   2. IF not valid, display error message and indicate error'd fields
   3. If no erros and the data is valid, then save the user info into the user table

* sha1 password hashing in suquelize after validation and pre input into user table

                                ~~~~~~~~~~~~~~~
                                  HELP SURVEY
                                ~~~~~~~~~~~~~~~

* mySQL doesn't support arrays. will make another table for answers and make it a foreign key of user_id

                                ~~~~~~~~~~~~~~~
                                  mySQL SCHEMA
                                ~~~~~~~~~~~~~~~

mySQL SCHEMA FOR USER ACCOUNTS
------------------------------
* Have the mySQL query monitor on my server showing the query log live to the class in a snap window
* USER LEVELS ~ 0 - user //// 1 - admin

* The column in the referencing table the foreign key refers to must be a primary key
* The values that are referred to must exist in the referenced table


FIELDS
-------

USER TABLE
----------
USER TABLE ON CREATION
----------------------
* userId - (PRIMARY KEY)
* userName - (UNIQUE)
* emailAddr (UNIQUE, PRIMARY, AUTO INC)
* password - hashed * salted (mmmm)

PROFILE FOR POST CREATION
-------------------------
* Registration Date
* postCount - this is incremented in the logic controller when someone POSTS a... new post or thread
* avatar
* session - the RCB session you are in
* realName
* location
* favLang

FORUM TABLES
------------
THREAD TABLE
------------

POST TABLE
----------

HELP ROOM TABLES
----------------
GIVE HELP
---------

GET HELP
--------

PROJECT TABLE
-------------

                                ~~~~~~~~~~~~~~~
                                   SEQUELIZE
                                ~~~~~~~~~~~~~~~

* Sequelize.TEXT ~ this allows large amounts of text in a column. might be great for posts?
* Can add validation logic functions in the validation field of a model
* findOrCreate() ~ create only if doesn't exist, similar to a unique key
* Can add regex and other things as sequelize model params after everything is working
* Singular names for sequelize models and define a plural name for the db?

// Create the tables:
Project.sync()
Task.sync()

// Force the creation!
Project.sync({force: true}) // this will drop the table first and re-create it afterwards

// drop the tables:
Project.drop()
Task.drop()

// event handling:
Project.[sync|drop]().then(function() {
  // ok ... everything is nice!
}).catch(function(error) {
  // oooh, did you enter wrong database credentials?
})

// Sync all models that aren't already in the database
sequelize.sync()

// Force sync all models
sequelize.sync({force: true})

// Drop all tables
sequelize.drop()

// emit handling:
sequelize.[sync|drop]().then(function() {
  // woot woot
}).catch(function(error) {
  // whooops
})

                                ~~~~~~~~~~~~~~~
                                  PASS HASHING
                                ~~~~~~~~~~~~~~~

npm install passport
npm install bcrypt ~ IF YOU HAVE PROBLEMS INSTALL MS VISUAL STUDIO COMMUNITY 2015 with all the language packs

http://www.techonthenet.com/mysql/functions/password.php ~ mySQL password syntax

"They are different things bcrypt work factor prevents brute forcing the passwords stored on the server.
When someone breaks into your system they will not be able to run a brute force and crack all the passwords of your users, since people tend
to use same passwords all over the place this is very useful. Passwords are also salted. First link explains it better then I can"

"I would recommend using the default 10 rounds when "salting", bcrypt.hash('password', 10, func .."

SET @salt := CONV(FLOOR(RAND() * 0x100000000), 10, 16)


MYSQL SALTING
-------------
UPDATE  passwords
SET     password = CONCAT(@salt, SHA(CONCAT(@salt, @typed_password)))

SELECT  1
FROM    passwords
WHERE   SHA(CONCAT(SUBSTRING(password, 1, 8), @typed_password)) = SUBSTRING(password, 9, 40)

                                ~~~~~~~~~~~~~~~
                                  UNIT TESTING
                                ~~~~~~~~~~~~~~~

* Use Mocha or Chai?
* Do it on post creation